name: CI

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        toolchain: [ nightly ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: Use Rust Cache
        if: ${{ runner.os == 'Linux' }}
        uses: Swatinem/rust-cache@v2.0.1

      - name: Run cargo check --all-targets w/ -D warnings
        run: cargo check --all-targets

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Run tests without tracking
        run: cargo nextest run

      - name: Run tests with tracking
        run: cargo nextest run --features track_allocations --success-output final

      - name: Run tests in release mode
        run: cargo nextest run --release

      - name: Install cargo-careful
        uses: taiki-e/install-action
        with:
          tool: cargo-careful

      - name: Run cargo test with cargo-careful
        run: cargo careful test

      - name: Run cargo doc
        if: ${{ runner.os == 'Linux' }}
        run: cargo doc --no-deps --document-private-items --all-features

      - name: Run build --release
        run: cargo build --release

  rustfmt:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get nightly Rust toolchain with rustfmt
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt

      - name: Run cargo fmt --all -- --check
        run: cargo fmt --all -- --check

  clippy:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get nightly Rust toolchain with clippy
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
          components: clippy

      - name: Run cargo clippy --package benemalloc --all-targets
        run: cargo clippy --package benemalloc --all-targets
